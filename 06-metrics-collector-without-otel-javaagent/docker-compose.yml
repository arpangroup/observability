#  https://opentelemetry.io/docs/languages/sdk-configuration/otlp-exporter/
#  https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/lokiexporter/README.md
#  https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlphttpexporter
#  https://github:com/open-telemetry/opentelemetry-collector-contrib/discussions/34233:


services:
  order-service:
    build: ./                                  # refer to the above Dockerfile & create a docker image
#    image: spring-api
    environment:
      OTEL_SERVICE_NAME: "order-service"
      OTEL_RESOURCE_ATTRIBUTES: "service=order-service,env=dev,dervice.name=order-service"
      OTEL_LOGS_EXPORTER: "otlp"
      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "http://collector:4317"
      #
      OTEL_METRICS_EXPORTER: "prometheus"
      OTEL_EXPORTER_PROMETHEUS_HOST: "0.0.0.0" # prometheus exporter: prometheus will query to this endpoint
      OTEL_EXPORTER_PROMETHEUS_PORT: "9464"    # prometheus exporter: prometheus will query to this port
    ports:
      - "8080:8080"
    depends_on:
      - zipkin-all-in-one
      - collector

  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:0.76.1
#    image: otel/opentelemetry-collector-contrib:0.91.0
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./docker/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    restart: always
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
    depends_on:
      - loki
#      - splunk
#      - kibana

  loki:
    container_name: loki
    image: grafana/loki:3.1.0
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    ports:
      - "3100:3100"

#  splunk:
#    container_name: splunk
#    image: splunk/splunk:latest
#    environment:
#      SPLUNK_START_ARGS: "--accept-license --no-prompt --answer-yes --gen-and-print-pass --no-telemetry"
##      SPLUNK_START_ARGS: "--accept-license"
#      SPLUNK_HEC_TOKEN: "00000000-0000-0000-0000-0000000000000"           # Replace with your token
#      SPLUNK_USERNAME: "admin"
#      SPLUNK_PASSWORD: "password"                   # Set a strong admin password
#    restart: always
#    ports:
#      - "8000:8000"   # Splunk Web interface
#      - "8088:8088"   # Splunk HEC port (HTTP Event Collector)
#      - "9997:9997"   # Splunk TCP input
#    volumes:
#      - splunk-data:/opt/splunk/var
##      - ./docker/splunk/inputs.conf:/opt/splunk/etc/system/local/inputs.conf  # Mount custom inputs.conf to disable token


#  elasticsearch:
#    container_name: elasticsearch
#    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
#    environment:
#      - discovery.type=single-node # use single-node discovery type to avoid bootstrap checks on ES startup
#      - bootstrap.memory_lock=true
#      - ES_JAVA_OPTS=-Xms512m -Xmx512m # Note: Elasticsearch Cluster requires significant amount of heap memory, we defined Java heap space using ES_JAVA_OPTS environment variable. Max = 8GB and Minimum = 2GB
#      - xpack.security.enabled=false  # Disable security (no auth)
#      - ELASTIC_USERNAME=elastic
#      - ELASTIC_PASSWORD=password
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - elastic_data:/usr/share/elasticsearch/data/
##      - ./docker/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
##      - ./docker/elasticsearch/data:/usr/share/elasticsearch/data
#    restart: always
#    ports:
#      - "9200:9200"   # Elasticsearch HTTP API
#      - "9300:9300"



  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    restart: always
    ports:
      - '9090:9090'
    depends_on:
      - order-service

  zipkin-all-in-one:
    container_name: zipkin
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "9411:9411"

#  kibana:
#    container_name: kibana
#    image: docker.elastic.co/kibana/kibana:8.5.0
#    environment:
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # Connect Kibana to Elasticsearch
#      - ELASTICSEARCH_USERNAME=kibana_system
#      - ELASTICSEARCH_PASSWORD=kibana_system_password
##      - ELASTICSEARCH_URL=http://elasticsearch:9200
##      - SERVER_NAME=my-kibana
##      - XPACK_SECURITY_ENABLED=false
##      - PATH_DATA=/usr/share/kibana/data
##      - XPACK_FLEET_PACKAGES_REGISTRY_URL=http://elasticsearch:9200  # Use local package registry
#      - xpack.encryptedSavedObjects.encryptionKey=something_which_is_at_least_32_characters  # Encryption key for Kibana
#    restart: always
#    ports:
#      - "5601:5601"   # Kibana Web UI port
##    volumes:
##      - ./docker/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
#    depends_on:
#      - elasticsearch


  grafana:
    container_name: grafana
    image: grafana/grafana
    environment:
      - "GF_AUTH_DISABLE_LOGIN_FORM=true"
      - "GF_AUTH_ANONYMOUS_ENABLED=true"
      - "GF_AUTH_ANONYMOUS_ORG_ROLE=Admin"
    volumes:
      - ./docker/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  splunk-data:
  elastic_data: {}